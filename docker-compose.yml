services:
  traefik:
    image: traefik:latest
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=$CLOUDFLARE_DNS_API_TOKEN
    command:
      - --log.level=DEBUG
      - --accesslog=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.defaultRule=Host(`{{ .Name | trimSuffix "-docker" | normalize }}.$DOMAIN_NAME`)
      - --providers.file.directory=/config
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.forgejo-ssh.address=:9022
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=$ACME_EMAIL
      - --certificatesresolvers.letsencrypt.acme.storage=/config/acme.json
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "9022:9022/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/config
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=traefik-forward-auth@docker
      - traefik.http.routers.traefik.service=api@internal
      # Middlewares definitions
      - traefik.http.middlewares.cacheprivate.headers.customresponseheaders.Cache-Control=private
      - traefik.http.middlewares.perso.basicauth.users=$PERSO_BASIC_AUTH
      - traefik.http.middlewares.japan7.basicauth.users=$JAPAN7_BASIC_AUTH
      - traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181
      - traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User
      # Root router
      - traefik.http.routers.root.entrypoints=websecure
      - traefik.http.routers.root.rule=Host(`$DOMAIN_NAME`)
      - traefik.http.routers.root.middlewares=homepage-redirect@docker,webfinger-redirect@docker
      - traefik.http.routers.root.service=noop@internal
      - traefik.http.middlewares.homepage-redirect.redirectregex.permanent=true
      - traefik.http.middlewares.homepage-redirect.redirectregex.regex=^https://$DOMAIN_NAME/$
      - traefik.http.middlewares.homepage-redirect.redirectregex.replacement=$HOMEPAGE_REDIRECT_URL
      - traefik.http.middlewares.webfinger-redirect.redirectregex.permanent=true
      - traefik.http.middlewares.webfinger-redirect.redirectregex.regex=^https://$DOMAIN_NAME/.well-known/webfinger
      - traefik.http.middlewares.webfinger-redirect.redirectregex.replacement=https://mastodon.$DOMAIN_NAME/.well-known/webfinger

  traefik-forward-auth:
    image: ghcr.io/japan7/traefik-forward-auth:master
    environment:
      - SECRET=$TFA_SECRET
      - ENCRYPTION_KEY=$TFA_ENCRYPTION_KEY
      - PROVIDER_URI=https://keycloak.$DOMAIN_NAME/realms/$TFA_REALM
      - CLIENT_ID=$TFA_CLIENT_ID
      - CLIENT_SECRET=$TFA_CLIENT_SECRET
      - SCOPE=openid profile email
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower:latest
    command:
      - --cleanup
      - --notifications=shoutrrr
      - --notification-url=$NOTIFICATION_URL
      - --no-startup-message
      - "--schedule=0 0 6 * * *"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  rclone:
    image: rclone/rclone:1.62
    command: mount $RCLONE_REMOTE /remote --vfs-cache-mode full --cache-dir /cache --transfers 50 --checkers 100 --allow-other --allow-non-empty --verbose
    volumes:
      - ./rclone:/config/rclone
      - rclone-cache:/cache
      - $RCLONE_HOST_MOUNT:/remote:shared
    devices:
      - /dev/fuse
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    restart: unless-stopped
    labels:
      - com.centurylinklabs.watchtower.monitor-only=true

  plex:
    image: lscr.io/linuxserver/plex:latest
    environment:
      - VERSION=docker
      - DOCKER_MODS=linuxserver/mods:plex-absolute-hama
    volumes:
      - ./plex:/config
      - $RCLONE_HOST_MOUNT:$MEDIA_MOUNT:ro,slave
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.entrypoints=websecure
      - traefik.http.routers.plex.middlewares=cacheprivate@docker
      - traefik.http.services.plex-docker.loadbalancer.server.port=32400

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    volumes:
      - ./tautulli:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.tautulli.entrypoints=websecure
      - traefik.http.routers.tautulli.middlewares=traefik-forward-auth@docker
      - traefik.http.services.tautulli-docker.loadbalancer.server.port=8181

  flexget:
    image: flexget/flexget:latest
    command: daemon start --autoreload-config
    volumes:
      - ./flexget:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.flexget.entrypoints=websecure
      - traefik.http.services.flexget-docker.loadbalancer.server.port=5050

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    volumes:
      - ./qbittorrent:/config
      - $RCLONE_HOST_MOUNT:/downloads:slave
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.middlewares=traefik-forward-auth@docker
      - traefik.http.services.qbittorrent-docker.loadbalancer.server.port=8080

  filebot:
    image: jlesage/filebot:latest
    volumes:
      - ./filebot:/config
      - $RCLONE_HOST_MOUNT:/storage:slave
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.filebot.entrypoints=websecure
      - traefik.http.routers.filebot.middlewares=traefik-forward-auth@docker
      - traefik.http.services.filebot-docker.loadbalancer.server.port=5800

  mkvtoolnix:
    image: jlesage/mkvtoolnix:latest
    volumes:
      - ./mkvtoolnix:/config
      - $RCLONE_HOST_MOUNT:/storage:slave
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.mkvtoolnix.entrypoints=websecure
      - traefik.http.routers.mkvtoolnix.middlewares=traefik-forward-auth@docker
      - traefik.http.services.mkvtoolnix-docker.loadbalancer.server.port=5800

  files:
    image: rclone/rclone:latest
    command: serve http $RCLONE_REMOTE --addr :8080 --template /config/rclone/index.html --verbose
    volumes:
      - ./rclone:/config/rclone
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.files.entrypoints=websecure
      - traefik.http.routers.files.middlewares=cacheprivate@docker,japan7@docker
      - traefik.http.services.files-docker.loadbalancer.server.port=8080

  projo:
    image: svenstaro/miniserve:alpine
    command: /html
    volumes:
      - $PROJO_HOST_MOUNT:/html:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.projo.entrypoints=websecure
      - traefik.http.routers.projo.middlewares=cacheprivate@docker,japan7@docker
      - traefik.http.services.projo-docker.loadbalancer.server.port=8080

  projo-dl:
    image: python:alpine
    hostname: $PROJO_HOSTNAME
    entrypoint: crond -f
    volumes:
      - $PROJO_HOST_MOUNT:/projo
      - ./projo:/etc/periodic/hourly:ro
    restart: unless-stopped

  keycloak:
    image: bitnami/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN_USER=$KEYCLOAK_ADMIN_USER
      - KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD
      - KEYCLOAK_DATABASE_HOST=keycloak-postgres
      - KEYCLOAK_DATABASE_NAME=postgres
      - KEYCLOAK_DATABASE_USER=$POSTGRES_USER
      - KEYCLOAK_DATABASE_PASSWORD=$POSTGRES_PASSWORD
      - KEYCLOAK_PRODUCTION=true
      - KEYCLOAK_PROXY=edge
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.services.keycloak-docker.loadbalancer.server.port=8080

  keycloak-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    volumes:
      - ./keycloak-postgres:/var/lib/postgresql/data
    restart: unless-stopped

  outline:
    image: outlinewiki/outline:latest
    env_file: ./.outline.env
    volumes:
      - ./outline:/var/lib/outline/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.outline.entrypoints=websecure
      - traefik.http.routers.outline.rule=Host(`docs.$DOMAIN_NAME`)
      - traefik.http.services.outline-docker.loadbalancer.server.port=3000

  outline-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    volumes:
      - ./outline-postgres:/var/lib/postgresql/data
    restart: unless-stopped

  outline-redis:
    image: redis:alpine
    restart: unless-stopped

  mastodon:
    image: lscr.io/linuxserver/mastodon:glitch
    environment:
      - LOCAL_DOMAIN=$DOMAIN_NAME
      - WEB_DOMAIN=mastodon.$DOMAIN_NAME
      - SINGLE_USER_MODE=true
      - SECRET_KEY_BASE=$MASTODON_SECRET_KEY_BASE
      - OTP_SECRET=$MASTODON_OTP_SECRET
      - VAPID_PRIVATE_KEY=$MASTODON_VAPID_PRIVATE_KEY
      - VAPID_PUBLIC_KEY=$MASTODON_VAPID_PUBLIC_KEY
      - DB_HOST=mastodon-postgres
      - DB_NAME=postgres
      - DB_USER=$POSTGRES_USER
      - DB_PASS=$POSTGRES_PASSWORD
      - REDIS_HOST=mastodon-redis
      - SMTP_SERVER=$SMTP_HOST
      - SMTP_PORT=$SMTP_PORT
      - SMTP_LOGIN=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
      - SMTP_FROM_ADDRESS=mastodon@$DOMAIN_NAME
      - SIDEKIQ_THREADS=1
      - WEB_CONCURRENCY=1
      - MAX_THREADS=10
    volumes:
      - ./mastodon:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.mastodon.entrypoints=websecure
      - traefik.http.services.mastodon-docker.loadbalancer.server.port=443
      # https://docs.linuxserver.io/faq#strict-proxy
      - traefik.http.services.mastodon-docker.loadbalancer.serverstransport=ignorecert@file
      - traefik.http.services.mastodon-docker.loadbalancer.server.scheme=https

  mastodon-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    volumes:
      - ./mastodon-postgres:/var/lib/postgresql/data
    restart: unless-stopped

  mastodon-redis:
    image: redis:alpine
    restart: unless-stopped

  forgejo:
    image: codeberg.org/forgejo/forgejo:1.20
    volumes:
      - ./forgejo:/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.forgejo.entrypoints=websecure
      - traefik.http.routers.forgejo.rule=Host(`git.$DOMAIN_NAME`)
      - traefik.http.services.forgejo-docker.loadbalancer.server.port=3000
      - traefik.tcp.routers.forgejo-ssh.entrypoints=forgejo-ssh
      - traefik.tcp.routers.forgejo-ssh.rule=HostSNI(`*`)
      - traefik.tcp.services.forgejo-ssh-docker.loadbalancer.server.port=22

  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    environment:
      - WEBHOOK_URL=https://n8n.$DOMAIN_NAME
    volumes:
      - ./n8n:/home/node/.n8n
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.services.n8n-docker.loadbalancer.server.port=5678

  owntracks-recorder:
    image: owntracks/recorder:latest
    hostname: owntracks-recorder
    environment:
      - OTR_PORT=0
    volumes:
      - ./owntracks-recorder:/store
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.owntracks-recorder.entrypoints=websecure
      - traefik.http.routers.owntracks-recorder.rule=Host(`owntracks.$DOMAIN_NAME`) && Path(`/pub`)
      - traefik.http.routers.owntracks-recorder.middlewares=perso@docker
      - traefik.http.services.owntracks-recorder-docker.loadbalancer.server.port=8083

  owntracks-frontend:
    image: owntracks/frontend:latest
    environment:
      - SERVER_HOST=owntracks-recorder
      - SERVER_PORT=8083
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.owntracks-frontend.entrypoints=websecure
      - traefik.http.routers.owntracks-frontend.rule=Host(`owntracks.$DOMAIN_NAME`)
      - traefik.http.routers.owntracks-frontend.middlewares=traefik-forward-auth@docker
      - traefik.http.services.owntracks-frontend-docker.loadbalancer.server.port=80

  borg:
    image: b3vis/borgmatic:latest
    hostname: borg
    environment:
      - BORG_REPO_REMOTE=$BORG_REPO_REMOTE
    volumes:
      - .:/mnt/source:ro # backup source
      - $BORG_REPO:/mnt/borg-repository # backup target
      - ./borg/etc:/etc/borgmatic.d/ # borgmatic config file(s) + crontab.txt
      - ./borg/config:/root/.config/borg # config and keyfiles
      - ./borg/cache:/root/.cache/borg # checksums used for deduplication
      - ./rclone:/root/.config/rclone
    restart: unless-stopped

volumes:
  rclone-cache:
